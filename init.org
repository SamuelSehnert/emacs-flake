#+PROPERTY: header-args:emacs-lisp :tangle yes

* Nix Emacs init file

** General Settings
#+BEGIN_SRC emacs-lisp
  (menu-bar-mode -1) 
  (scroll-bar-mode -1)
  (tool-bar-mode -1)
#+END_SRC

** Package Settings
*** Evil packages
#+BEGIN_SRC emacs-lisp
  (use-package evil
    :ensure t
    :init
    (setq evil-respect-visual-line-mode t
	  evil-want-keybinding nil)
    :config
    (evil-mode 1))

  (use-package evil-surround
    :ensure t
    :after evil
    :config
    (global-evil-surround-mode 1))

  (use-package evil-collection
    :ensure t
    :after evil
    :config
    (evil-collection-init))

  (use-package evil-commentary
    :ensure t
    :after evil
    :config
    (evil-commentary-mode))
#+END_SRC

*** Completions
#+BEGIN_SRC emacs-lisp
  (use-package vertico
    :ensure t
    :config
    (vertico-mode t))

  (use-package orderless
    :ensure t
    :custom
    (completion-styles '(orderless basic))
    (completion-category-overrides '((file (styles basic partial-completion)))))
#+END_SRC

*** Help
#+BEGIN_SRC emacs-lisp
  (use-package helpful
    :ensure t
    :variables
    personal-keybinds
    :bind
    ("C-h f" . 'helpful-callable) ;; Look up callables (includes macros).
    ("C-h F" . 'helpful-function) ;; Look up *F*unctions (excludes macros).
    ("C-h v" . 'helpful-variable)
    ("C-h k" . 'helpful-key)
    ("C-h x" . 'helpful-command)
    ("C-c C-d" . 'helpful-at-point))
#+END_SRC

*** Language modes
#+BEGIN_SRC emacs-lisp
  (use-package nix-mode
    :ensure t)
  (use-package racket-mode
    :ensure t)
#+END_SRC

** Org Mode Setup
*** Org
It would be cool if org mode removed results after closing buffer
#+BEGIN_SRC emacs-lisp
  (use-package org
    :hook (org-mode . visual-line-mode)
    :config
    (setq org-confirm-babel-evaluate nil)
    (org-babel-do-load-languages
     'org-babel-load-languages
     '((racket . t))))
#+END_SRC

*** Org Babel Languages
#+BEGIN_SRC emacs-lisp
  (use-package ob-racket)
#+END_SRC

*** Extra Packages
#+BEGIN_SRC emacs-lisp
  (use-package pdf-tools
    :ensure t
    :mode (("\\.pdf\\'" . pdf-view-mode))
    :hook (pdf-view-mode . pdf-view-themed-minor-mode))

  (use-package pdf-view-restore
    :ensure t
    :after pdf-tools
    :config
    (add-hook 'pdf-view-mode-hook 'pdf-view-restore-mode))
#+END_SRC

#+BEGIN_SRC racket :prologue "#lang sicp"
  (inc 41)
#+END_SRC
